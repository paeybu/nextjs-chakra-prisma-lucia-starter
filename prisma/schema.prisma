// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./data.db"
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  name      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]
  budgets   Budget[]
}

model Account {
  id           Int           @id @default(autoincrement())
  name         String
  type         String //CHECKING, SAVINGS, CREDIT, CASH
  balance      Float         @default(0.0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       Int
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
}

model Budget {
  id           Int           @id @default(autoincrement())
  name         String
  total        Float         @default(0.0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       Int
  user         User          @relation(fields: [userId], references: [id])
  categories   Category[]
  transactions Transaction[]
}

model Category {
  id           Int           @id @default(autoincrement())
  name         String
  budgeted     Float         @default(0.0)
  spent        Float         @default(0.0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  budgetId     Int
  budget       Budget        @relation(fields: [budgetId], references: [id])
  transactions Transaction[]
}

model Transaction {
  id          Int       @id @default(autoincrement())
  amount      Float
  date        DateTime  @default(now())
  description String?
  accountId   Int
  account     Account   @relation(fields: [accountId], references: [id])
  budgetId    Int?
  budget      Budget?   @relation(fields: [budgetId], references: [id])
  categoryId  Int?
  category    Category? @relation(fields: [categoryId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// enum AccountType {
//   CHECKING
//   SAVINGS
//   CREDIT
//   CASH
// }
